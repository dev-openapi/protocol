// 微信小程序接口-小程序码与小程序连接 weixin-miniprogram
syntax = "proto3";
package api.weixin.qq.com;
import "google/api/annotations.proto";

option go_package = "github.com/dev-openapi/wx-miniprogram";

service QrcodeService {
	// 获取小程序码 https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/qr-code/getQRCode.html
	rpc GetQrcode(GetQrcodeReq) returns (GetQrcodeRes) {
		option (google.api.http) = {
			post: "/wxa/getwxacode?access_token={access_token}",
			body: "body",
		};	
	}
	// 获取不限制的小程序码 https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/qr-code/getUnlimitedQRCode.html
	rpc GetUnlimitedQrcode(GetUnlimitedQrcodeReq) returns (GetUnlimitedQrcodeRes) {
		option (google.api.http) = {
			post: "/wxa/getwxacodeunlimit?access_token={access_token}",
			body: "body",
		};
	}
	// 获取小程序二维码 https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/qr-code/createQRCode.html
	rpc CreateQrcode(CreateQrcodeReq) returns (CreateQrcodeRes) {
		option (google.api.http) = {
			post: "/cgi-bin/wxaapp/createwxaqrcode?access_token={access_token}",
			body: "body",
		};	
	}
	// 查询小程序scheme码
	rpc QueryScheme(QuerySchemeReq) returns (QuerySchemeRes) {
		option (google.api.http) = {
			post: "/wxa/queryscheme?access_token={access_token}"
			body: "body",
		};
	}
	// 获取scheme码
	rpc GenerateScheme(GenerateSchemeReq) returns (GenerateSchemeRes) {
		option (google.api.http) = {
			post: "/wxa/generatescheme?access_token={access_token}"
			body: "body",
		};
	}
}

message LineColor {
	int32 r = 1; // 默认值{"r":0,"g":0,"b":0} ；auto_color 为 false 时生效，使用 rgb 设置颜色 例如 {"r":"xxx","g":"xxx","b":"xxx"} 十进制表示
	int32 g = 2; // 默认值{"r":0,"g":0,"b":0} ；auto_color 为 false 时生效，使用 rgb 设置颜色 例如 {"r":"xxx","g":"xxx","b":"xxx"} 十进制表示
	int32 b = 3; // 默认值{"r":0,"g":0,"b":0} ；auto_color 为 false 时生效，使用 rgb 设置颜色 例如 {"r":"xxx","g":"xxx","b":"xxx"} 十进制表示
}

message GetQrcodeReq {
	string access_token = 1; // 接口调用凭证，该参数为 URL 参数，非 Body 参数。使用getAccessToken 或者 authorizer_access_token
	message Body {
		string path = 1; // 扫码进入的小程序页面路径，最大长度 1024 字节，不能为空；对于小游戏，可以只传入 query 部分，来实现传参效果，如：传入 "?foo=bar"，即可在 wx.getLaunchOptionsSync 接口中的 query 参数获取到 {foo:"bar"}。
		int32 width = 2; // 二维码的宽度，单位 px。默认值为430，最小 280px，最大 1280px
		bool auto_color = 3; // 默认值false；自动配置线条颜色，如果颜色依然是黑色，则说明不建议配置主色调
		LineColor line_color = 4;
	}
	Body body = 2;
}

message GetQrcodeRes {
	int32 errcode = 1;
	string errmsg = 2;
	bytes buffer = 3; // 成功时返回的图片 Buffer
}

message GetUnlimitedQrcodeReq {
	string access_token = 1; // 接口调用凭证，该参数为 URL 参数，非 Body 参数。使用getAccessToken 或者 authorizer_access_token
	message Body {
		string scene = 1; // 最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&'()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）
		string page = 2; // 默认是主页，页面 page，例如 pages/index/index，根路径前不要填加 /，不能携带参数（参数请放在 scene 字段里），如果不填写这个字段，默认跳主页面。
		bool check_path = 3; // 默认是true，检查page 是否存在，为 true 时 page 必须是已经发布的小程序存在的页面（否则报错）；为 false 时允许小程序未发布或者 page 不存在， 但page 有数量上限（60000个）请勿滥用。
		string env_version = 4; // 要打开的小程序版本。正式版为 "release"，体验版为 "trial"，开发版为 "develop"。默认是正式版。
		int32 width = 5; // 默认430，二维码的宽度，单位 px，最小 280px，最大 1280px
		bool auto_color = 6; // 自动配置线条颜色，如果颜色依然是黑色，则说明不建议配置主色调，默认 false
		LineColor line_color = 7; // 默认是{"r":0,"g":0,"b":0} 。auto_color 为 false 时生效，使用 rgb 设置颜色 例如 {"r":"xxx","g":"xxx","b":"xxx"} 十进制表示
		bool is_hyaline = 8; // 默认是false，是否需要透明底色，为 true 时，生成透明底色的小程序
	}
	Body body = 2;
}

message GetUnlimitedQrcodeRes {
	int32 errcode = 1;
	string errmsg = 2;
	bytes buffer = 3; // 成功时返回的图片 Buffer
}

message CreateQrcodeReq {
	string access_token = 1; // 接口调用凭证，该参数为 URL 参数，非 Body 参数。access_token和cloudbase_access_token二选一. 如果是第三方代调用请传入authorizer_access_token；cloudbase_access_token可通过getOpenData接口获得
	message Body {
		string path = 1; //扫码进入的小程序页面路径，最大长度 128 字节，不能为空；对于小游戏，可以只传入 query 部分，来实现传参效果，如：传入 "?foo=bar"，即可在 wx.getLaunchOptionsSync 接口中的 query 参数获取到 {foo:"bar"}。 
		string width = 2; // 二维码的宽度，单位 px。最小 280px，最大 1280px;默认是430
	}
	Body body = 3;
}

message CreateQrcodeRes {
	int32 errcode = 1;
	string errmsg = 2;
	bytes buffer = 3; // 图片 Buffer
	string contentType = 4; // contentType
}

message QuerySchemeReq {
	string access_token = 1;
	message Body {
		string scheme = 1;
	}
	Body body = 2;
}

message SchemeInfo {
	string appid = 1;
	string path = 2;
	string query = 3;
	int64 create_time = 4;
	int64 expire_time = 5;
	string env_version = 6;
}

message QuerySchemeRes {
	int32 errcode = 1;
	string errmsg = 2;
	SchemeInfo scheme_info = 3;
	string visit_openid = 4;
}

message JumpWxa {
	string path = 1;
	string query = 2;
	string env_version = 3;
}

message GenerateSchemeReq {
	string access_token = 1;
	message Body {
		JumpWxa jump_wxa = 1;
		bool is_expire = 2;
		int64 expire_time = 3;
		int32 expire_type = 4;
		int64 expire_interval = 5;
	}
	Body body = 2;
}

message GenerateSchemeRes {
	int32 errcode = 1;
	string errmsg = 2;
	string openlink = 3;
}